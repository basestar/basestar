
Project:

#  extend: Object

  properties:
    name:
      type: string
      required: true
      constraints:
        length:
          expression: value.size() > 2
    description:
      type: string
      required: true
    owner:
      type: User
      expression: this.owner ?? caller

#  children:
#    tasks:
#      schema: Task

  links:
#    tasks:
#      schema: Task
#      expression: project.id == this.id
    teams:
      schema: ProjectTeam
      expression: project.id == this.id
#      delete: RESTRICT
    users:
      schema: ProjectUser
      expression: project.id == this.id
#      delete: RESTRICT

  indexes:
    owner:
      partition: owner.id

  permissions:
    read:
      expression: this.owner.id == caller.id
        || this.id in caller.projects.map(p -> p.id)
        || this.id in caller.teams.flatMap(t -> t.projects.map(p -> p.id))
      expand:
        - caller.projects
        - caller.teams
        - caller.teams.projects
    update:
      expression: (before.owner.id == caller.id && after.owner.id == before.owner.id)
        || before.users.anyMatch(u -> u.id == caller.id && u.permissions.contains("UPDATE"))
        || before.teams.anyMatch(t -> t.permissions.contains("UPDATE") && t.users.anyMatch(u -> u.id == caller.id))
      expand:
        - before.users
        - before.teams
    delete:
      expression: before.owner.id == caller.id


ProjectPermission:

  type: enum
  values:
    - UPDATE
    - INVITE


ProjectTeam:

  properties:
    project:
      type: Project
    team:
      type: Team
    permissions:
      type:
        set: ProjectPermission

  links:
    tasks:
      schema: TeamUser
      expression: user.id == this.id

  indexes:
    project:
      partition: project.id
      sort: team.id
      unique: true
      consistency: ATOMIC
    team:
      partition: team.id
      sort: project.id
      unique: true
      consistency: ATOMIC

ProjectUser:

  properties:
    project:
      type: Project
    user:
      type: User
    permissions:
      type:
        set: ProjectPermission

  indexes:
    project:
      partition: project.id
      sort: user.id
      unique: true
      consistency: ATOMIC
    user:
      partition: user.id
      sort: project.id
      unique: true
      consistency: ATOMIC

