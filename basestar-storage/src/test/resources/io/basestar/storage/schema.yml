Address:
  properties:
    country:
      type: string?
    state:
      type: string?
    city:
      type: string?
    zip:
      type: string?
  indexes:
    Country:
      sparse: true
      partition:
        - country
      sort:
        - city
        - zip
    State:
      sparse: true
      partition:
        - state
      sort:
        - city
        - zip

Simple:
  properties:
    boolean:
      type: boolean?
    integer:
      type: integer?
    number:
      type: number?
    string:
      type: string?
    binary:
      type: binary?
    date:
      type: date?
    datetime:
      type: datetime?
    struct:
      type: Point?
    object:
      type: Simple?
    arrayBoolean:
      type:
        array?: boolean
    arrayInteger:
      type:
        array?: integer
    arrayNumber:
      type:
        array?: number
    arrayString:
      type:
        array?: string
    arrayBinary:
      type:
        array?: binary
    arrayDate:
      type:
        array?: date
    arrayDatetime:
      type:
        array?: datetime
    arrayStruct:
      type:
        array?: Point
    arrayObject:
      type:
        array?: Simple
    mapBoolean:
      type:
        map?: boolean
    mapInteger:
      type:
        map?: integer
    mapNumber:
      type:
        map?: number
    mapString:
      type:
        map?: string
    mapBinary:
      type:
        map?: binary
    mapStruct:
      type:
        map?: Point
    mapObject:
      type:
        map?: Simple
    mapDate:
      type:
        map?: date
    mapDatetime:
      type:
        map?: datetime

Point:
  type: struct
  properties:
    x:
      type: integer?
    y:
      type: integer?

Pointset:
  properties:
    points:
      type:
        array?: Point
  indexes:
    points:
      over:
        p: points
      partition:
        - p.x
        - p.y

RefTarget:
  type: object
  properties:
    source:
      type: RefSource?
    hello:
      type: string?

RefSource:
  type: object
  properties:
    target:
      type: RefTarget?
    hello:
      type: string?
  indexes:
    target:
      partition:
        - target.id

DateSort:
  type: object
  properties:
    group:
      type: string
  indexes:
    created:
      consistency: ATOMIC
      partition:
        - group
      sort:
        - created

Expanded:
  type: object
  properties:
    target:
      type: RefTarget
    source:
      type: RefTarget
  expand:
    - target
    - source
  indexes:
    expanded:
      partition:
        - target.hello
      sort:
        - source.hello
      consistency: async

VersionedRef:
  type: object
  properties:
    versionedRef:
      type:
        VersionedRef?:
          versioned: true

Interface:
  type: interface
  properties:
    propBase:
      type: string

ExtendA:
  type: object
  extend: Interface
  properties:
    propA:
      type: string

ExtendB:
  type: object
  extend: Interface
  properties:
    propB:
      type: string

Secret:
  type: object
  properties:
    secret:
      type: secret


ViewBase:
  type: object
  properties:
    name:
      type: string
    status:
      type: string

AddressStats:
  type: view
  group:
    - state
  properties:
    state: state
    count: count()
  from:
    schema: Address
  where: country == 'US'

AddressDisplayStats:
  type: view
  group:
    - state
  properties:
    result: state + count(zip != null)
  from:
    schema: Address
  where: country == 'US'

GBAddresses:
  type: view
  properties:
    country: country
    state: state
    city: city
    zip: zip
  from:
    schema: Address
  where: country == 'GB'