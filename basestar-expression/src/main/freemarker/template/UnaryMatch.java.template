package io.basestar.expression.match;

/*-
 * #%L
 * basestar-expression
 * %%
 * Copyright (C) 2019 - 2020 Basestar.IO
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import io.basestar.expression.type.Coercion;
import io.basestar.expression.exception.BadOperandsException;

import java.time.Instant;
import java.time.LocalDate;
import java.util.Collection;
import java.util.Map;

import lombok.Generated;

@Generated
public interface UnaryMatch<T> {

    Void NULL = null;

    default T defaultApply(final Object value) {

        throw new BadOperandsException(this + " cannot be applied to " + Coercion.className(value));
    }

<#list types as t>
    default T apply(final ${t} value) {

        return defaultApply(value);
    }

</#list>
    default T apply(final Object value) {

        if(value == null) {
            return apply(NULL);
<#list types as t>
<#if t != "Void">
        } else if (value instanceof ${t}) {
            return apply((${t}) value);
</#if>
</#list>
        } else {
            return defaultApply(value);
        }
    }
}
