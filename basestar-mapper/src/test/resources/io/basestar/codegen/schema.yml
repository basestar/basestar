MyEnum:
  type: enum
  values:
    - VALUE_1
    - VALUE_2

MyBase:
  type: interface
  properties:
    test0:
      type: MyBase

MyObject:
  type: object
  extend: MyBase
  description: "Simple test object"
  bucket:
    - using: test1
      count: 5
      function: adler-32
    - using: test2, test3
  id:
    expression: test1 + "_" + test2
  properties:
    test1:
      type: string
      immutable: true
      constraints:
        - size:
            max: 10
          message: test
          groups:
            - fatal
    test2:
      type:
        array: MyEnum
    test3:
      type: MyObject
    mydate:
      type: date
    mydatetime:
      type: datetime
    point:
      type: Point
  links:
    test4:
      expression: id==this.id && "test"==test1
      schema: MyObject
    test5:
      expression: id==this.id && "test"==test1
      schema: MyObject
      single: true
  permissions:
    read:
      expression: true
      anonymous: true
  indexes:
    blah:
      partition:
        - test1
      sort:
        - test2

Point:
  type: struct
  properties:
    x:
      type: number
    y:
      type: number

MyView:
  type: view
  from: MyObject
  group: test1
  where: a + "_" + b

#ns1.ns2.MyObject:
#  type: object
#  extend: MyObject

ns1.ns2.UPPERCASE:
  type: object