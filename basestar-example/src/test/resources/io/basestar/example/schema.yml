Principal:
    type: object


User:
    type: object
    extend: Principal
    links:
      groups:
        schema: Group
        expression: m.id == this.id for any m of members


Group:
    type: object
    extend: Principal
    properties:
      owner:
        type: User
        required: true
      members:
        type:
          array: User
    indexes:
      owner:
        partition:
          - owner.id
      members:
        over:
          member: members
        partition:
          - member.id
    permissions:
      read:
        expression: this.owner.id == caller.id
      create:
        expression: after.owner.id == caller.id
      update:
        expression: before.owner.id == caller.id && after.owner.id == caller.id
      delete:
        expression: before.owner.id == caller.id


Project:
    type: object
    properties:
      owner:
        type: Principal
    indexes:
      owner:
        partition:
          - owner.id
    permissions:
      read:
        expression: this.owner.id in {caller.id} + {g.id for g of caller.groups}
        expand:
          - caller.groups
      create:
        expression: after.owner.id in {caller.id} + {g.id for g of caller.groups}
        expand:
          - caller.groups


Thing:
  type: object
  properties:
    project:
      type: Project
#  permissions:
#    read:
#      inherit:
#        - project.read
