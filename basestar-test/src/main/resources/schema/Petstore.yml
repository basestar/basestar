PetStatus:
  type: enum
  values:
    - available
    - pending
    - sold

Pet:
  type: interface
  properties:
    name:
      type: string
    photoUrls:
      type:
        array: string
    tags:
      type:
        map?: string
    status:
      type: PetStatus
    store:
      type: Store
  indexes:
    store:
      partition: store.id
      sort: name
  links:
    orders:
      schema: Order
      expression: pet.id == this.id

Cat:
  type: object
  extend: Pet
  properties:
    catBreed:
      type: string
    sound:
      type: string
      expression: "'meow'"

Dog:
  type: object
  extend: Pet
  properties:
    dogBreed:
      type: string
    sound:
      type: string
      expression: "'woof'"

Mouse:
  type: object
  extend: Pet

OrderStatus:
  type: enum
  values:
    - placed
    - approved
    - delivered

Order:
  type: object
  properties:
    pet:
      type: Pet
    quantity:
      type: integer
    total:
      type: integer
    createDate:
      type: datetime
    shipDate:
      type: datetime
    status:
      type: OrderStatus
    complete:
      type: boolean
    store:
      type: Store
    user:
      type: User
  queries:
    byPet:
      arguments:
        - name: petId
          type: string
      expression: pet.id == petId
      sort: id:ASC
    byStore:
      arguments:
        - name: storeId
          type: string
      expression: store.id == storeId
      sort: id:ASC
    byUser:
      arguments:
        - name: userId
          type: string
      expression: user.id == userId
      sort: id:ASC
  indexes:
    user:
      partition: user.id
      sort:
        - status
        - createDate:DESC
    store:
      partition: store.id
      sort:
        - status
        - createDate:DESC
    pet:
      partition: pet.id
  permissions:
    create:
      expression: pet.orders.isEmpty()
      expand:
        - pet.orders

UserStatus:
  type: enum
  values:
    - registered
    - confirmed
    - unconfirmed

Phone:
  type: struct
  properties:
    home:
      type: string
    mobile:
      type: string
    work:
      type: string

User:
  type: object
  properties:
    username:
      type: string
    store:
      type: Store
    firstName:
      type: string
    lastName:
      type: string
    email:
      type: string
    password:
      type: string
    phone:
      type: Phone
    ipAddress:
      type: string
    avatarUrl:
      type: string
    status:
      type: UserStatus
    deleted:
      type: boolean
    addresses:
      type:
        array: Address
  indexes:
    store:
      partition: store.id
      sort: username
  links:
    orders:
      schema: Order
      expression: user.id == this.id

UserStats:
  type: view
  group:
    - store
    - status
  properties:
    count: count()
    registered: count(status == 'registered')
    confirmed: count(status == 'confirmed')
    unconfirmed: count(status == 'unconfirmed')
  from:
    schema: User

Store:
  type: object
  properties:
    address:
      type: Address
    name:
      type: string
  indexes:
    name:
      partition: name
  links:
    pets:
      schema: Pet
      expression: store.id == this.id
    users:
      schema: User
      expression: store.id == this.id
    orders:
      schema: Order
      expression: store.id == this.id

Address:
  type: object
  properties:
    name:
      type: string
    company:
      type: string
    address:
      type: string
    city:
      type: string
    state:
      type: string
    country:
      type: string
    zip:
      type: string
    lat:
      type: number
    lon:
      type: number
  indexes:
    Country:
      sparse: true
      partition:
        - country
      sort:
        - city
        - zip
    State:
      sparse: true
      partition:
        - state
      sort:
        - city
        - zip

AddressStats:
  type: view
  materialized: false
  group:
    - country
    - state
  properties:
    country: country
    state: state
    count: count()
    hasZip: count(zip != null)
    lon: avg(lon)
    lat: avg(lat)
    bound: "[min(lat), min(lon), max(lat), max(lon)]"
  from:
    schema: Address

Country:
  type: object
  properties:
    name:
      type: string

PetStats:
  type: view
  group:
    - schema
  properties:
    schema: schema
    count: count()
  from:
    schema: Pet
  where: status == 'available'

OrderStats:
  type: view
  group:
    - store
  properties:
    store: store
    count: count()
    total: avg(total)
    max: max(total)
    min: min(total)
  from:
    schema: Order
  where: status == 'delivered'

